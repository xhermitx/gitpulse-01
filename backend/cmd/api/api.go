package api

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger/v2"
	_ "github.com/xhermitx/gitpulse-01/backend/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/xhermitx/gitpulse-01/backend/service/candidate"
	"github.com/xhermitx/gitpulse-01/backend/service/job"
	"github.com/xhermitx/gitpulse-01/backend/service/user"
	"gorm.io/gorm"
)

type APIServer struct {
	addr string
	db   *gorm.DB
}

func NewAPIServer(addr string, db *gorm.DB) *APIServer {
	return &APIServer{
		addr: addr,
		db:   db,
	}
}

//	@title			Gitpulse Tracker
//	@version		1.0
//	@description	A Platform for evaluating candidates based on their git profiles.
//	@host			localhost:8080
//	@BasePath		/
func (s *APIServer) Run() error {
	var (
		userStore      = user.NewStore(s.db)
		jobStore       = job.NewStore(s.db)
		candidateStore = candidate.NewStore(s.db)
	)

	router := mux.NewRouter()

	router.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler)

	subrouter := router.PathPrefix("/api/v1").Subrouter().StrictSlash(true)

	userHandler := user.NewHandler(userStore)
	userHandler.RegisterRoutes(subrouter.PathPrefix("/user").Subrouter())

	jobHandler := job.NewHandler(jobStore, userStore, candidateStore)
	jobHandler.RegisterRoutes(subrouter.PathPrefix("/job").Subrouter())

	subrouter.HandleFunc("/", Greetings)
	log.Println("Listening on", s.addr)
	return http.ListenAndServe(s.addr, router)
}

// Greetings is a sample API handler
//
//	@Summary					Example API
//	@Description				Greeting
//	@Tags						example
//	@Produce					json
//	@Success					200	{string}	string	"Success"
//	@Router						/api/v1/ [get]
//	@securityDefinitions.basic	BasicAuth
func Greetings(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Greetings from gitpulse!")
}
